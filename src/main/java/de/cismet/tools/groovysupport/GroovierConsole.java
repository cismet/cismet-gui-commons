/*
 * GroovierConsole.java
 *
 * Created on 11. November 2006, 11:08
 */
package de.cismet.tools.groovysupport;

import de.cismet.tools.gui.StaticSwingTools;
import de.cismet.tools.gui.javakit.JavaContext;
import de.cismet.tools.gui.javakit.JavaEditorKit;
import de.cismet.tools.gui.javakit.Token;
import groovy.inspect.swingui.ObjectBrowser;
import groovy.lang.Binding;
import groovy.lang.GroovyShell;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JEditorPane;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;

/**
 *
 * @author  thorsten.hell@cismet.de
 */
public class GroovierConsole extends javax.swing.JPanel {

    private Binding binding;
    private GroovyShell shell;
    private ObjectBrowser objectBrowser;

    /** Creates new form GroovierConsole */
    public GroovierConsole() {
        initComponents();
        JavaEditorKit kit = new JavaEditorKit();
        //GroovyKit gk=new GroovyKit();

        editor.setEditorKitForContentType("text/java", kit);
        editor.setContentType("text/java");
        // PENDING(prinz) This should have a customizer and
        // be serialized.  This is a bogus initialization.
        JavaContext styles = kit.getStylePreferences();
        Style s;
        s = styles.getStyleForScanValue(Token.COMMENT.getScanValue());
        StyleConstants.setForeground(s, new Color(102, 153, 153));
        s = styles.getStyleForScanValue(Token.STRINGVAL.getScanValue());
        StyleConstants.setForeground(s, new Color(102, 153, 102));
        Color keyword = new Color(102, 102, 255);
        for (int code = 70; code <= 130; code++) {
            s = styles.getStyleForScanValue(code);
            if (s != null) {
                StyleConstants.setForeground(s, keyword);
            }
        }
        objectBrowser = new ObjectBrowser();
        //panObjectBrowser.add(objectBrowser.get,BorderLayout.CENTER);
        binding = new Binding();

        SimpleAttributeSet errorAttributeSet = new SimpleAttributeSet();
        StyleConstants.setForeground(errorAttributeSet, Color.red);
        GuiStream gsErr = new GuiStream(System.err, output, errorAttributeSet, false);
        GuiStream gsOut = new GuiStream(System.out, output, new SimpleAttributeSet(), false);
        System.setOut(gsOut);
        System.setErr(gsErr);
        shell = new GroovyShell(binding);
        StaticSwingTools.setNiftyScrollBars(scpOutput);
        StaticSwingTools.setNiftyScrollBars(scpEditor);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        panTop = new javax.swing.JPanel();
        scpEditor = new javax.swing.JScrollPane();
        editor = new javax.swing.JEditorPane();
        panBottom = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chkEmptyBeforeRun = new javax.swing.JCheckBox();
        chkStackTrace = new javax.swing.JCheckBox();
        scpOutput = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        panTop.setLayout(new java.awt.BorderLayout());

        editor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editorKeyTyped(evt);
            }
        });

        scpEditor.setViewportView(editor);

        panTop.add(scpEditor, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(panTop);

        panBottom.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        chkEmptyBeforeRun.setSelected(true);
        chkEmptyBeforeRun.setText("Ausgabefenster immer leeren");
        chkEmptyBeforeRun.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkEmptyBeforeRun.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(chkEmptyBeforeRun);

        chkStackTrace.setText("Exceptions mit GroovyStackTrace");
        chkStackTrace.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkStackTrace.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel1.add(chkStackTrace);

        panBottom.add(jPanel1, java.awt.BorderLayout.NORTH);

        output.setBackground(java.awt.SystemColor.control);
        output.setEditable(false);
        output.setPreferredSize(new java.awt.Dimension(800, 6));
        scpOutput.setViewportView(output);

        panBottom.add(scpOutput, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(panBottom);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void editorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorKeyTyped
        if (evt.getKeyChar() == (KeyEvent.VK_ENTER) && (evt.getModifiers() == KeyEvent.CTRL_MASK)) {
            if (chkEmptyBeforeRun.isSelected()) {
                output.setText("");
            }
            try {
                shell.parse(editor.getText());
                Object result = shell.evaluate(editor.getText());
                //objectBrowser.inspect(result);
                
                if (!chkEmptyBeforeRun.isSelected()) {
                    System.out.println("\n--");
                }
            } catch (Throwable t) {
                if (chkStackTrace.isSelected()) {
                    t.printStackTrace();
                } else {
                    System.err.println(t);
                }
            }
        }
        
    }//GEN-LAST:event_editorKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkEmptyBeforeRun;
    private javax.swing.JCheckBox chkStackTrace;
    private javax.swing.JEditorPane editor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane output;
    private javax.swing.JPanel panBottom;
    private javax.swing.JPanel panTop;
    private javax.swing.JScrollPane scpEditor;
    private javax.swing.JScrollPane scpOutput;
    // End of variables declaration//GEN-END:variables
    
    public void setVariable(String key, Object variable) {
        binding.setVariable(key, variable);
    }

    class GuiStream extends PrintStream {

        protected JEditorPane theGuiComponent;
        SimpleAttributeSet set = null;
        boolean logLastInput = false;
        long lastInput = -1;

        public GuiStream(OutputStream out, JEditorPane component, SimpleAttributeSet set, boolean logLastInput) {
            super(out);
            this.logLastInput = logLastInput;
            this.set = set;
            theGuiComponent = component;
        }

        @Override
        public void println(final String s) {
            if (logLastInput) {
                lastInput = System.currentTimeMillis();
            }
            Runnable update = new Runnable() {
                public void run() {
                    try {
                        theGuiComponent.getDocument().insertString(theGuiComponent.getDocument().getLength(), s + "\n", set);
                    } catch (javax.swing.text.BadLocationException ble) {
                    // no printstacktrace possible else chain reaction
                    }
                //theGuiComponent.setText(theGuiComponent.getText() + "\n<p>" + s+"<p>");
                }
            };
            EventQueue.invokeLater(update);
        }

        public long getLastInputTime() {
            return lastInput;
        }

        @Override
        public void println(Object o) {
            if (o == null) {
                println("null");
            } else {
                println(o.toString());
            }
        }

        @Override
        public void print(final String s) {
            if (logLastInput) {
                lastInput = System.currentTimeMillis();
            }
            Runnable update = new Runnable() {

                public void run() {
                    try {
                        theGuiComponent.getDocument().insertString(theGuiComponent.getDocument().getLength(), s, set);
                    } catch (javax.swing.text.BadLocationException ble) {
                    // no printstacktrace possible else chain reaction
                    }
                //theGuiComponent.setText(theGuiComponent.getText() + "\n<p>" + s+"<p>");
                }
            };
            EventQueue.invokeLater(update);
        }

        @Override
        public void print(double d) {
            print(d + "");
        }

        @Override
        public void print(char[] s) {
            print(new String(s));
        }

        @Override
        public void print(char c) {
            print(c + "");
        }

        @Override
        public void print(Object obj) {
            print(obj.toString());
        }

        @Override
        public void print(float f) {
            print(f + "");
        }

        @Override
        public void print(int i) {
            print(i + "");
        }

        @Override
        public void print(boolean b) {
            print(b + "");
        }

        @Override
        public void print(long l) {
            print(l + "");
        }
    }
}
