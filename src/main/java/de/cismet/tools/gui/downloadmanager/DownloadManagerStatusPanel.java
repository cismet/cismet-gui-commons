/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.tools.gui.downloadmanager;

import com.sun.awt.AWTUtilities;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.RoundRectangle2D;

import javax.swing.JWindow;
import javax.swing.Timer;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   daniel
 * @version  $Revision$, $Date$
 */
public class DownloadManagerStatusPanel extends javax.swing.JPanel implements DownloadListChangedListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final long ANIMATION_TIME = 500;
    private static final float ANIMATION_TIME_f = (float)ANIMATION_TIME;

    //~ Instance fields --------------------------------------------------------

    // End of variables declaration
    int dowloads = 0;
    Timer animationTimer;
    // Variables declaration - do not modify
    private javax.swing.JLabel lblRunning;
    private javax.swing.JLabel lblRunningCounter;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalCounter;
    private int showX;
    private int startY;
    private long animationStart;

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DownloadManagerStatusPanel.
     */
    public DownloadManagerStatusPanel() {
        initComponents();
        DownloadManager.instance().addDownloadListChangedListener(this);
        updateLabels();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblRunning = new javax.swing.JLabel();
        lblRunningCounter = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblTotalCounter = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lblRunning.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerStatusPanel.class,
                "DownloadManagerStatusPanel.lblRunning.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblRunning, gridBagConstraints);

        lblRunningCounter.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerStatusPanel.class,
                "DownloadManagerStatusPanel.lblRunningCounter.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(lblRunningCounter, gridBagConstraints);

        lblTotal.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerStatusPanel.class,
                "DownloadManagerStatusPanel.lblTotal.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblTotal, gridBagConstraints);

        lblTotalCounter.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerStatusPanel.class,
                "DownloadManagerStatusPanel.lblTotalCounter.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        add(lblTotalCounter, gridBagConstraints);
    }                                                                // </editor-fold>//GEN-END:initComponents

    @Override
    public void downloadListChanged(final DownloadListChangedEvent event) {
        final int i = DownloadManager.instance().getCountDownloadsCompleted();
        if (dowloads < i) {
            showNotification();
        }
        dowloads = i;
        updateLabels();
    }

    /**
     * DOCUMENT ME!
     */
    private void updateLabels() {
        lblTotalCounter.setText("" + DownloadManager.instance().getCountDownloadsTotal());
        lblRunningCounter.setText("" + DownloadManager.instance().getCountDownloadsCompleted());
    }

    /**
     * DOCUMENT ME!
     */
    private void showNotification() {
        final DownloadDesktopNotification notification = new DownloadDesktopNotification();
        final JWindow window = new JWindow();
//        window.setUndecorated(true);
//        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JWindow tmp = new JWindow();
        tmp.getContentPane().add(notification);
        tmp.pack();
        final Dimension windowSize = tmp.getSize();
        tmp.getContentPane().removeAll();
        window.getContentPane().add(notification);
        window.pack();
        window.setSize(windowSize);
        final Frame f = StaticSwingTools.getParentFrame(this);
        window.setLocation(f.getWidth() - windowSize.width - 10, f.getHeight() - windowSize.height - 10);
        window.setVisible(true);
        window.setBackground(new Color(1.0f, 1.0f, 1.0f, 1.0f));
        window.repaint();

        final Timer t = new Timer(3000, new ActionListener() {

                    @Override
                    public void actionPerformed(final ActionEvent ae) {
                        window.setVisible(false);
                        window.dispose();
                    }
                });
        t.start();
    }

    /**
     * DOCUMENT ME!
     *
     * @param  x  DOCUMENT ME!
     * @param  w  DOCUMENT ME!
     */
    private void showAt(final int x, final JWindow w) {
        showX = x;
        final Frame f = StaticSwingTools.getParentFrame(w);
        startY = f.getY() + f.getHeight();

        final ActionListener animationLogic = new ActionListener() {

                @Override
                public void actionPerformed(final ActionEvent ae) {
                    final long elapsed = System.currentTimeMillis() - animationStart;
                    if (elapsed > ANIMATION_TIME) {
                        w.getContentPane().removeAll();
                        w.getContentPane().add(new DownloadDesktopNotification());
                        w.pack();
                        w.setLocation(showX, startY - w.getSize().height);
                        w.setVisible(true);
                        w.repaint();
                        animationTimer.stop();
                        animationTimer = null;
                    } else {
                        final float progress = (float)elapsed / ANIMATION_TIME_f;
//                    int animationHeight =(int) progress*w.getHeight();
//                    animationHeight = Math.max(animationHeight, 1);
                        w.pack();
                        w.setLocation(showX, startY - w.getHeight());
                        w.setVisible(true);
                        w.repaint();
                    }
                }
            };
        animationTimer = new Timer(50, animationLogic);
        animationStart = System.currentTimeMillis();
        animationTimer.start();
    }
}
